generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

generator zod {
  provider         = "zod-prisma-types"
  addIncludeType   = "false"
  addSelectType    = "false"
  createInputTypes = "false"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  name              String
  avatarUrl         String?
  hashedPassword    String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  Sessions          UserSession[]
  UserOauthAccounts UserOauthAccount[]
  Tasks             Task[]
}

model UserSession {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model UserOauthAccount {
  id             String   @id @default(cuid())
  providerId     String
  providerUserId String
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([providerId, providerUserId])
}

model Task {
  id        String    @id @default(cuid())
  title     String
  dueDate   DateTime?
  completed Boolean
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
}
